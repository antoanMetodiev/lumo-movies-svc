package com.example.streammatemoviesvc.app.feather.services;

import com.example.streammatemoviesvc.app.feather.clients.VideoProviderClient;
import com.example.streammatemoviesvc.app.feather.models.dtos.VideoProviderRequest;
import com.example.streammatemoviesvc.app.feather.models.entities.Movie;
import com.example.streammatemoviesvc.app.feather.repositories.MovieRepository;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import java.net.http.HttpClient;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.concurrent.CompletableFuture;

@Service
public class PlayerLinksService {

    private final HttpClient httpClient;

    private final VideoProviderClient videoProviderClient;
    private final MovieService movieService;
    private final MovieRepository movieRepository;
    private final ObjectMapper objectMapper;

    @Autowired
    public PlayerLinksService(HttpClient httpClient,
                              VideoProviderClient videoProviderClient,
                              MovieService movieService,
                              MovieRepository movieRepository,
                              ObjectMapper objectMapper) {

        this.httpClient = httpClient;
        this.videoProviderClient = videoProviderClient;
        this.movieService = movieService;
        this.movieRepository = movieRepository;
        this.objectMapper = objectMapper;
    }

    @Async
    public CompletableFuture<Void> generateMorePlayerLinks() {
        return CompletableFuture.runAsync(() -> {
            try {
                List<Movie> movies = movieRepository.getMoviesWithoutVideoUrls();
                System.out.println("üé¨ –ù–∞–º–µ—Ä–µ–Ω–∏ —Ñ–∏–ª–º–∏ –±–µ–∑ –≤–∏–¥–µ–æ: " + movies.size());

                for (Movie movie : movies) {
                    System.out.println("+=======>>>>  –¢–™–†–°–Ø–¢ –°–ï –ó–ê –§–ò–õ–ú  =>  " + movie.getTitle() + " - " + movie.getReleaseDate());
                    System.out.println();
                    String year = movie.getReleaseDate().substring(0, 4);

                    VideoProviderRequest request = VideoProviderRequest.builder()
                            .title(movie.getTitle())
                            .releaseYear(year)
                            .build();

                    try {
                        Set<String> allVideoUrls = videoProviderClient.getAllVideoSrc(request);
                        System.out.println(allVideoUrls);

                        // üëÄ –î–µ–±—ä–≥ –ª–æ–≥
                        System.out.println("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏ URL-–∏ –∑–∞ " + movie.getTitle() + ": " + allVideoUrls);

                        movie.setVideoURLs(new ArrayList<>()); // –∏–Ω–∞—á–µ –º–∏ e null, –∑–∞—â–æ—Ç–æ –≥–∏ —Å—ä–∑–¥–∞–≤–∞—Ö —Ä—ä—á–Ω–æ, –∞ –Ω–µ —Å hibernate
                        if (allVideoUrls.isEmpty()) {
                            movie.getVideoURLs().add("NOT ALLOWED!");
                        }

                        allVideoUrls.forEach(url -> movie.getVideoURLs().add(url));
                        movieRepository.save(movie);

                    } catch (Exception e) {
                        System.err.println("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ " + movie.getTitle() + ": " + e.getMessage());
                        e.printStackTrace();
                    }
                }

            } catch (Exception e) {
                System.err.println("üî• –ö—Ä–∏—Ç–∏—á–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –ª–∏–Ω–∫–æ–≤–µ: " + e.getMessage());
                e.printStackTrace();
            }
        });
    }
}
